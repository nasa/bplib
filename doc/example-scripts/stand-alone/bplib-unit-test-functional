#!/bin/bash
bplib-unit-test-functional-err() {
   echo "bplib-unit-test-functional exited on error."
   exit 1
}
trap bplib-unit-test-functional-err ERR

# bplib-unit-test-functional
# Based on bplib/.github/workflows/unit-test-functional.yml

   cd $BPLIB_HOME
   # source bplib-set-envs sets BPLIB_SOURCE.
   BPLIB_BUILD=TBD # Set later for Debug/Release and OSAL/POSIX

   if { [ "$1" = "Debug" ] || [ "$1" = "Release" ]; } &&
      { [ "$2" = "OSAL" ]  || [ "$2" = "POSIX" ]; }; then
      MATRIX_BUILD_TYPE="${1}"
      MATRIX_OS_LAYER="${2}"
      MATRIX_ID="matrix-${MATRIX_BUILD_TYPE}-${MATRIX_OS_LAYER}"
      echo "Running $0 $1 $2"
   else
      echo "$0 $1 $2"
      echo "Usage: $0 [Debug, Release] [OSAL, POSIX]"
      exit 1
   fi

   BPLIB_BUILD="bplib-build-${MATRIX_ID}"

   # setup-cbor was already done by install-toolchain.
   # bplib-dep dependencies are satisfied.

   # Create the build folder based on Debug/Release and OSAL/POSIX
   cmake \
          -DCMAKE_BUILD_TYPE="${MATRIX_BUILD_TYPE}" \
          -DBPLIB_OS_LAYER="${MATRIX_OS_LAYER}" \
          -DCMAKE_PREFIX_PATH=/usr/local/lib/cmake \
          -S "${BPLIB_SOURCE}" -B "${BPLIB_BUILD}"

   # Build bplib
   cd "${BPLIB_BUILD}"
   make all

   # Run tests, if available.
   if [ -e 'CTestTestfile.cmake' ]; then
      # Tests that require setuid root: common rbtree and ut_functional sanity.
      RBTREE_RUNNER=common/ut-functional/functional-bplib_rbtree-testrunner
      sudo chown root $RBTREE_RUNNER
      sudo chmod u+s $RBTREE_RUNNER
      SANITY_RUNNER=ut-functional/functional-bplib_sanity-testrunner
      sudo chown root $SANITY_RUNNER 
      sudo chmod u+s $SANITY_RUNNER
      ctest --output-on-failure |& tee test.log
      # Set the owner back to the user so the build tree can be deleted.
      sudo chown $USER $RBTREE_RUNNER $SANITY_RUNNER
   else
      echo "ctest tests are not available for bplib ${MATRIX_BUILD_TYPE} ${MATRIX_OS_LAYER}"
   fi
   cd ..

